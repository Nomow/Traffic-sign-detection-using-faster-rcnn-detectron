function [data] = AddAnnsToJsonDataset(data, bbox, segmentation, area, dp_masks, dp_i, dp_u, dp_v, dp_x, dp_y, im)
    [data] = AddImDataToJsonDataset(data, im);
    [data] = AddAnnsDataOfImToJsonDataset(data, bbox, segmentation, area, dp_masks, dp_i, dp_u, dp_v, dp_x, dp_y);
end


function [data] = AddAnnotation(data, bbox, category_id)

    annotation_id = 0;
    if(~isempty(data.annotations))
        annotation_id = data.annotations{end}.id + 1;
    end

    img_annotations = struct;


    img_annotations.id = annotation_id;
    img_annotations.image_id = data.images{end}.id;
    img_annotations.category_id
    img_annotations.segmentation
    img_annotations.area
    img_annotations.bbox
    img_annotations.iscrowd

im_anns.num_keypoints = 0;
im_anns.iscrowd = 0;
im_anns.keypoints = [];
im_anns.dp_x = dp_x{j, :}' - 1;
im_anns.dp_U = dp_u{j, :}';
im_anns.dp_V = dp_v{j, :}';
im_anns.bbox = bbox{j, :}' - 1;
im_anns.category_id = 1;
im_anns.dp_y = dp_y{j, :}' - 1;

            im_anns.dp_masks = {}; % dp_masks(j, :);
            for k=1:size(dp_masks, 2)
                if(~isempty(find(dp_masks{j, k} > 0)))
                    im_anns.dp_masks{1, k} = MaskApi.encode(uint8(dp_masks{j, k}));
                else
                    im_anns.dp_masks{1, k} = [];
                end
            end
            data.annotations{end + 1} = im_anns;
        end
    end
end


function [data] = AddImDataToJsonDataset(data, im)
    id = 0;
    filename = string(id) + '.jpg';
    if(~isempty(data.images))
        id = data.images{end}.id + 1;
        filename = string(id) + '.jpg';
    end
    im_data = struct;
    im_data.license = 1;
    im_data.file_name = filename; %
    im_data.coco_url = '';
    im_data.coco_url = '';
    im_data.height = size(im, 1);
    im_data.width = size(im, 2);
    im_data.flickr_url = '';
    im_data.id = id; %
    data.images{end + 1} = im_data;
end
